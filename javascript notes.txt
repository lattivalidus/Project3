if you put the javascript in the head it will run before the page loads. 

javascript will appear as soon as the page encounters it. so the position is important as it can run either before or after the page runs. 

fills out a form or moves their mouse. Run this in response to a certain event...


can put javascript in a separate file - myscript.js
<script src="myscript.js"> </script> - same rules as for another link, image, etc...if you leave the type attribute off it will be recognized as javascript. 

probably don't watt to put the script tag in the head, unless you are using it to create page content. usually want them in the body at the very bottom before the </body> tag. 

Keeping track of variables
variable is a container
use the word "var" and the word you want (the variable itself can be whatever you want but no spaces, can use letters, numbers, underscore, and dollar sign.)

until variable has a value it will be undefined
var year;
year=2011;
or
var year=2011; \\this is to set the variable and define it in one line. still case sensitive

if you are creating multiple variable that you don't want defined you can add them all 
var year, time, date;
similarly to add values you can do
var year=2011, time=3, date=21;

can also store boulean values which is either "true" or "false" \\must be lower case

if (condition) {code}; \\if statement, must be true or false
== is considered equality if you use = it will set a value \\ single = are for assignments 
!= is not equal

can follow with "else" can also nest all of this

=== is strict equality
can also us <= and >= (less than and equal to or greater than or equal to)

&& is logical and so
if (a==b && c==d)
if (a==b || c==d) // the || is for "or"

condition ? true:false


use console.log can be for developers only and help understand the code better
can also use .warn, .error, .info, will have different icons appear in the console, as used in firebug

creating loops, aka iteration. Looping is easy, figuring out how to stop is the hard part

"while" is the loop statement, as opposed to "if"

do/while statements while always happen once
do{statement}while(variable) checks condition statement before starting the loop

before setting up the loop you use an index like var a=1;
then there is someting to check the condition, and then an increment index (a++)

"for" loop for(vari=1; i<10; i++) //this puts everything about the loop at the very top

"break" will immediately take you out of the loop

continue // done with iteration. so the loop will continue (as opposed to break) but it will stop where you are in the set of instructions and go back to the top to continue processing

empty paretheses in a function means that there won't be any information passed into it
function ILoveFunctions() // this will not have information passed into it

functions only run when you call it
best practice to put your javaScript functions at the top of your file

if you drop extra parameters in your code for functions anthing you don't include will be undefined

declaring a variable within parameters of a function, its a local variable so you can't use it in another function unless you define it outside of the parameters of a specific function

array is a single variable that holds multiple values // use "[]" use a zero based index (start with 0 instead of 1) if you use commas to separate the values it will automatically assign them starting at "0"

arrays are objects, and are dynamic

length value will tell you how many items are in it,so anything .length will tell you how many variables or values are within whatever you are inquiring

var myArrayOfLinks = document.getElementsByTagName("a"); //brings all "a" tags or creates a list of links ("a" tags)

JavaScript numbers are 64-bit floating point numbers
If you try to multiply a number by a string, you will get "NaN" which is "not a number"

if (isNaN(function)){console.log("its not a number!");}
if (!isNaN(functionName)){console.log("it is a number!");} //to know if it is a number you have to do a doulbe negative

Math.round(); // rounds a number
Math.max() // returns largest number
Math.min() // returns smallest number
Math.random() // duh

use a \ to ignore quotes in a variable
"this is how, "

can use .split to separate values into an array with " " or "," or however you want it split

working with dates
.getTime is the best for comparisons

new Object //creates a new object to hold information
object.variable="name"

DOM - Document Object Model

document.getElementById("someId"); // this is how you grab ids from html to work with them. CANNOT DO THIS WITH CLASSES!!! now using IDs kind of makes sense, where I wondered why we didn't use classes all the time just in case we wanted to apply them later or something. This creates a handle into the document at whatever place your ID is. 

document.getElementsByTagName("li") // grabs the tag name "li" and creates an array with all of the information in it

use set attribute to affect divs in different ways like moving text to the align right

var mainContent=document.getElementById("mainContent"); // This pulls the id, and creates a handle to manipulate using javaScript
mainContent.setAttribute("align","right"); // Set attribute allows us to play with it. the first element is what you are doing, and the second specifies

var mainTitle=document.getElementById(mainTitle); //making a handle to manipulate. this would be the way to dump html in your document. 

creating dom elements
create element, then add it to the document
var myNewElement=document.createElement("li"); //creates a new list item
myElement.appendChild(myNewElement); //this sets it within the unordered list
var myText-document.creatTextNode("new list item text");
myNewElement.appendChild(myText); //adds text to the element we have created?

appendChild will always add to the end. can also use .insertBefore so long as you specify the tag that you want to put before


Events:

myelement.onclick=function() {}; // annonymous function, don't need a name because we already say when this function will run (onclick). don't forget the semicolon!!!

document.addEventLIstener('click', myFunction, false); // what listener and the function to look for. can add one event and multiple listeners. can also do removeEventListener. IE 8 and previous does not have this function!!! if you use this you will need to write code to see if this exists. for previous to IE8 use .attachEvent.

window is the top element of the page you are looking at
window.onload=function(){
prepareEventHandlers();
}; //create a var called prepareEventHandlers(doesn't have to be that name specifically)

use .value for any form field when using .onfocus or .onblur

setTimeout (function, time in milliseconds);

setInterval(changeImage, time in milliseconds); // will need to create a var for changeImage
varImageArray=["image1.jpg","image2.jpg"];
varImageIndex=0;

function changeImage(){
myImage.setAttribute("src",imageArray[imageIndex]);
imageIndex++;
if (imageIndex>=imageArray.length{imageInex=0;}}
setInterval(changeImage,5000); //changes image every 5 seconds






